/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FramePackage;

import MainPackage.Menu;
import static MainPackage.Menu.player;
import MainPackage.Player;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author eu3035jm
 */
public class adminFrame extends javax.swing.JFrame {

    //value for the funds to be reset to 
    public static final int RESET_FUNDS = 100;

    //gets a copy of the player list
    public static List<Player> playerListCopy = new ArrayList<>();

    /**
     * Creates new form adminFrame
     *
     * @param playerList The original list.
     * @require The list is created and passed from the main menu.
     * @ensure The list is copied so it can be modified in the admin window.
     */
    public adminFrame(List<Player> playerList) {
        initComponents();
        playerListCopy = playerList;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        resetStatsButton = new javax.swing.JButton();
        resetPlayersButton = new javax.swing.JButton();
        removePlayerButton = new javax.swing.JButton();
        resetFundsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Admin Settings");

        resetStatsButton.setText("Reset Stats");
        resetStatsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetStatsButtonActionPerformed(evt);
            }
        });

        resetPlayersButton.setText("Reset Players");
        resetPlayersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetPlayersButtonActionPerformed(evt);
            }
        });

        removePlayerButton.setText("Remove Player");
        removePlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePlayerButtonActionPerformed(evt);
            }
        });

        resetFundsButton.setText("Reset Funds");
        resetFundsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetFundsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(resetStatsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetPlayersButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removePlayerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetFundsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {removePlayerButton, resetPlayersButton, resetStatsButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(removePlayerButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetStatsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetPlayersButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resetFundsButton))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {removePlayerButton, resetPlayersButton, resetStatsButton});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void resetStatsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetStatsButtonActionPerformed
        // TODO add your handling code here:

        //get each player and reset stats  
        for (int player = 0; player < playerListCopy.size(); player++) {
            playerListCopy.get(player).resetAllStats();
        }

        //show that the list has been reset
        JOptionPane.showMessageDialog(rootPane, "Player stats have been reset. Program will save and restart.");

        //saves the reset data
        try {
            // create a new file with an ObjectOutputStream
            FileOutputStream out = new FileOutputStream("players.ser");
            try (ObjectOutputStream oout = new ObjectOutputStream(out)) {
                oout.writeObject(playerListCopy);
            }

        } catch (IOException ex) {
        }

        //restarts program
        dispose();
        Menu menu = new Menu();
        menu.setVisible(true);
    }//GEN-LAST:event_resetStatsButtonActionPerformed

    private void resetPlayersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetPlayersButtonActionPerformed
        // TODO add your handling code here:
        //new player
        Player player = new Player();

        //set default username and funds
        player.setUsername("default");
        player.setFunds(100);

        //reset player list
        playerListCopy.clear();

        //add default user to list
        playerListCopy.add(player);

        //show that the list has been reset
        JOptionPane.showMessageDialog(rootPane, "Player info has been reset. Program will save and restart.");

        //saves the reset data
        try {
            // create a new file with an ObjectOutputStream
            FileOutputStream out = new FileOutputStream("players.ser");
            try (ObjectOutputStream oout = new ObjectOutputStream(out)) {
                oout.writeObject(playerListCopy);
            }

        } catch (IOException ex) {
        }

        //restarts program
        dispose();
        Menu menu = new Menu();
        menu.setVisible(true);
    }//GEN-LAST:event_resetPlayersButtonActionPerformed

    private void removePlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePlayerButtonActionPerformed
        // TODO add your handling code here:

        //value for if player got removed or not
        boolean removed = false;

        //get the input for the user to be removed
        String removePlayer = "";

        //validate player
        while (removePlayer == null || removePlayer == "") {
            removePlayer = JOptionPane.showInputDialog(this, "Please enter the player to be removed.");
        }
        
        //find the player in the player list and remove it
        for (int playerIndex = 0; playerIndex < playerListCopy.size(); playerIndex++) {
            if (playerListCopy.get(playerIndex).getUsername().equalsIgnoreCase(removePlayer.trim())) {
                playerListCopy.remove(playerIndex);
                removed = true;
            }
        }

        //output ACK and save if removed, output NACK if not found/removed
        if (removed) {
            //show that the list has been reset
            JOptionPane.showMessageDialog(rootPane, removePlayer + " has been removed. Program will save and restart.");

            //saves the reset data
            try {
                // create a new file with an ObjectOutputStream
                FileOutputStream out = new FileOutputStream("players.ser");
                try (ObjectOutputStream oout = new ObjectOutputStream(out)) {
                    oout.writeObject(playerListCopy);
                }

            } catch (IOException ex) {
            }

            //restarts program
            dispose();
            Menu menu = new Menu();
            menu.setVisible(true);
        } else {//not found/removed
            //show that player wasn't found
            JOptionPane.showMessageDialog(rootPane, removePlayer + " could not be found or removed.");
        }
    }//GEN-LAST:event_removePlayerButtonActionPerformed

    private void resetFundsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetFundsButtonActionPerformed
        //get each player and reset funds to $100
        for (int player = 0; player < playerListCopy.size(); player++) {
            playerListCopy.get(player).setFunds(RESET_FUNDS);
        }

        //show that the list has been reset
        JOptionPane.showMessageDialog(rootPane, "Player stats have been reset. Program will save and restart.");

        //saves the reset data
        try {
            // create a new file with an ObjectOutputStream
            FileOutputStream out = new FileOutputStream("players.ser");
            try (ObjectOutputStream oout = new ObjectOutputStream(out)) {
                oout.writeObject(playerListCopy);
            }

        } catch (IOException ex) {
        }

        //restarts program
        dispose();
        Menu menu = new Menu();
        menu.setVisible(true);
    }//GEN-LAST:event_resetFundsButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                List<Player> playerList = null;
                new adminFrame(playerList).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton removePlayerButton;
    private javax.swing.JButton resetFundsButton;
    private javax.swing.JButton resetPlayersButton;
    private javax.swing.JButton resetStatsButton;
    // End of variables declaration//GEN-END:variables
}
