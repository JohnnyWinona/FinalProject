package FramePackage;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import GamePackage.Slapjack;
import MainPackage.Card;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import javax.swing.JOptionPane;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import javax.swing.ImageIcon;

/**
 *
 * @author
 */
public class sjFrame extends javax.swing.JFrame implements KeyListener {

    Slapjack deck = new Slapjack();

    private List<Card> PlayerHand1 = new ArrayList<Card>();
    private List<Card> PlayerHand2 = new ArrayList<Card>();
    private List<Card> ComputerHand1 = new ArrayList<Card>();
    private List<Card> ComputerHand2 = new ArrayList<Card>();
    private List<Card> CenterHand = new ArrayList<Card>();
    //    private ArrayList<Deck> deck = new ArrayList<Deck>();

    int Humanplayers = 0;

    int Computerplayers = 0;

    int delay = 800;

    int x = 0;

    String temp1 = "/cards/JACKofSPADES.jpg";

    String temp2 = "/cards/JACKofCLUBS.jpg";

    String temp3 = "/cards/JACKofHEARTS.jpg";

    String temp4 = "/cards/JACKofDIAMONDS.jpg";

    //    System.out.println(temp2);  
    ImageIcon JACKofSPADES;
    ImageIcon JACKofCLUBS;
    ImageIcon JACKofHEARTS;
    ImageIcon JACKofDIAMONDS;

    /**
     * Creates new form sjFrame
     */
    public sjFrame() {

        initComponents();

        startButton.setEnabled(false);
        addComputerButton.setEnabled(false);

        //players
        jLabelPlayer1.setVisible(false);
        jLabel2Player1.setVisible(false);

        jLabelPlayer2.setVisible(false);
        jLabel2Player2.setVisible(false);

        jLabelPlayer3.setVisible(false);
        jLabel3Player3.setVisible(false);

        jLabelPlayer4.setVisible(false);
        jLabel4Player4.setVisible(false);

        CenterDeck.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();
        jLabelPlayer3 = new javax.swing.JLabel();
        jLabelPlayer1 = new javax.swing.JLabel();
        jLabelPlayer2 = new javax.swing.JLabel();
        jLabelPlayer4 = new javax.swing.JLabel();
        jLabel2Player2 = new javax.swing.JLabel();
        jLabel3Player3 = new javax.swing.JLabel();
        jLabel4Player4 = new javax.swing.JLabel();
        jLabel2Player1 = new javax.swing.JLabel();
        CenterDeck = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        addComputerButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Slapjack");

        panel1.setBackground(new java.awt.Color(0, 102, 0));

        jLabelPlayer3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cards/green_back.jpg"))); // NOI18N

        jLabelPlayer1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cards/red_back.jpg"))); // NOI18N

        jLabelPlayer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cards/purple_back.jpg"))); // NOI18N

        jLabelPlayer4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cards/gray_back.jpg"))); // NOI18N
        jLabelPlayer4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabelPlayer4.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        jLabel2Player2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2Player2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2Player2.setText("<html>Player 2 <br> \nUse letter L to Slap<br>\n# of cards -</html>\n");

        jLabel3Player3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3Player3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3Player3.setText("<html>Computer<br> \nPlayer 2<br>\n# of cards -</html>\n");

        jLabel4Player4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4Player4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4Player4.setText("<html>Computer<br> \nPlayer 2<br>\n# of cards -</html>\n");

        jLabel2Player1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2Player1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2Player1.setText("<html>Player 1 <br> \nUse letter A to Slap<br>\n# of cards -</html>\n");

        CenterDeck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cards/blue_back.jpg"))); // NOI18N

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4Player4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jLabelPlayer4)
                .addGap(61, 61, 61)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(CenterDeck)
                        .addGap(50, 50, 50)
                        .addComponent(jLabelPlayer2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2Player2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(jLabelPlayer1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2Player1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(jLabelPlayer3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3Player3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelPlayer3))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel3Player3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelPlayer2)
                                    .addComponent(jLabelPlayer4)
                                    .addComponent(CenterDeck)))
                            .addGroup(panel1Layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(jLabel4Player4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2Player2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)))
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                        .addComponent(jLabelPlayer1)
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                        .addComponent(jLabel2Player1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44))))
        );

        addButton.setText("Add Player");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        addComputerButton.setText("Add Computer Player");
        addComputerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addComputerButtonActionPerformed(evt);
            }
        });

        startButton.setText("Start Game");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit Game");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addComputerButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(22, 22, 22))
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitButton)
                    .addComponent(startButton)
                    .addComponent(addButton)
                    .addComponent(addComputerButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        //  jTextField1.addKeyListener(this);

        JACKofSPADES = new ImageIcon(getClass().getResource(temp1));
        JACKofCLUBS = new ImageIcon(getClass().getResource(temp2));
        JACKofHEARTS = new ImageIcon(getClass().getResource(temp3));
        JACKofDIAMONDS = new ImageIcon(getClass().getResource(temp4));

        addButton.setEnabled(false);
        addComputerButton.setEnabled(false);

        startButton.setVisible(false);

        panel1.addKeyListener(this);
        panel1.setFocusable(true);
        panel1.requestFocusInWindow();

        //  List<Card> PlayerHand1 = new ArrayList<Card>();
        // PlayerHand1.start2PLayer();
        if (Humanplayers == 2 && Computerplayers == 2) {
            PlayerHand1 = deck.generateHand(Humanplayers, Computerplayers);

            PlayerHand2 = deck.generateHand(Humanplayers, Computerplayers);

            ComputerHand1 = deck.generateHand(Humanplayers, Computerplayers);

            ComputerHand2 = deck.generateHand(Humanplayers, Computerplayers);

        } else if (Humanplayers == 2 && Computerplayers == 1) {
            PlayerHand1 = deck.generateHand(Humanplayers, Computerplayers);
            PlayerHand2 = deck.generateHand(Humanplayers, Computerplayers);
            ComputerHand1 = deck.generateHand(Humanplayers, Computerplayers);
            CenterHand = deck.draw();

        } else if (Humanplayers == 1 && Computerplayers == 1) {
            PlayerHand1 = deck.generateHand(Humanplayers, Computerplayers);

            ComputerHand1 = deck.generateHand(Humanplayers, Computerplayers);

        } else if (Humanplayers == 2 && Computerplayers == 0) {
            PlayerHand1 = deck.generateHand(Humanplayers, Computerplayers);

            PlayerHand2 = deck.generateHand(Humanplayers, Computerplayers);
        } else if (Humanplayers == 1 && Computerplayers == 2) {
            PlayerHand1 = deck.generateHand(Humanplayers, Computerplayers);

            ComputerHand1 = deck.generateHand(Humanplayers, Computerplayers);
            
            ComputerHand2 = deck.generateHand(Humanplayers, Computerplayers);
        }

        //begin loop
        //int delay = 1000;
        ActionListener taskPerformer;
        taskPerformer = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                //...Perform a task...
                if (Humanplayers == 2 && Computerplayers == 2) {

                    if (PlayerHand1.size() == 0 && PlayerHand2.size() == 0 && ComputerHand1.size() == 0) {
                        ImageIcon icon = new ImageIcon("src/cards/aces.jpg");
                        JOptionPane.showMessageDialog(null, "Computer 2 Wins!!!",
                                "Slap Jack", JOptionPane.INFORMATION_MESSAGE, icon);
                        dispose();
                        x = 10;
                        ComputerHand1.add(null);
                        PlayerHand2.add(null);
                        PlayerHand1.add(null);
                    }
                    if (PlayerHand1.size() == 0 && PlayerHand2.size() == 0 && ComputerHand2.size() == 0) {
                        ImageIcon icon = new ImageIcon("src/cards/aces.jpg");
                        JOptionPane.showMessageDialog(null, "Computer 1 Wins!!!",
                                "Slap Jack", JOptionPane.INFORMATION_MESSAGE, icon);
                        dispose();
                        x = 10;
                        ComputerHand2.add(null);
                        PlayerHand2.add(null);
                        PlayerHand1.add(null);
                    }
                    if (PlayerHand1.size() == 0 && ComputerHand1.size() == 0 && ComputerHand2.size() == 0) {
                        ImageIcon icon = new ImageIcon("src/cards/aces.jpg");
                        JOptionPane.showMessageDialog(null, "Player 2 Wins!!!",
                                "Slap Jack", JOptionPane.INFORMATION_MESSAGE, icon);
                        dispose();
                        x = 10;
                        PlayerHand2.add(null);
                        ComputerHand1.add(null);
                        ComputerHand2.add(null);
                    }
                    if (PlayerHand2.size() == 0 && ComputerHand1.size() == 0 && ComputerHand2.size() == 0) {
                        ImageIcon icon = new ImageIcon("src/cards/aces.jpg");
                        JOptionPane.showMessageDialog(null, "Player 1 Wins!!!",
                                "Slap Jack", JOptionPane.INFORMATION_MESSAGE, icon);
                        dispose();
                        x = 10;
                        PlayerHand2.add(null);
                        ComputerHand1.add(null);
                        ComputerHand2.add(null);
                    }

                } else if (Humanplayers == 2 && Computerplayers == 1) {

                    if (PlayerHand1.size() == 0 && PlayerHand2.size() == 0) {
                        ImageIcon icon = new ImageIcon("src/cards/aces.jpg");
                        JOptionPane.showMessageDialog(null, "Computer 1 Wins!!!",
                                "Slap Jack", JOptionPane.INFORMATION_MESSAGE, icon);
                        dispose();
                        x = 10;
                        PlayerHand1.add(null);
                        PlayerHand2.add(null);
                    }
                    if (PlayerHand1.size() == 0 && ComputerHand1.size() == 0) {
                        ImageIcon icon = new ImageIcon("src/cards/aces.jpg");
                        JOptionPane.showMessageDialog(null, "Player 2 Wins!!!",
                                "Slap Jack", JOptionPane.INFORMATION_MESSAGE, icon);
                        dispose();
                        x = 10;
                        PlayerHand1.add(null);
                        ComputerHand1.add(null);
                    }
                    if (PlayerHand2.size() == 0 && ComputerHand1.size() == 0) {
                        ImageIcon icon = new ImageIcon("src/cards/aces.jpg");
                        JOptionPane.showMessageDialog(null, "Player 1 Wins!!!",
                                "Slap Jack", JOptionPane.INFORMATION_MESSAGE, icon);
                        dispose();
                        x = 10;
                        PlayerHand2.add(null);
                        ComputerHand1.add(null);
                    }

                } else if (Humanplayers == 1 && Computerplayers == 1) {

                    if (PlayerHand1.size() == 0) {
                        ImageIcon icon = new ImageIcon("src/cards/aces.jpg");
                        JOptionPane.showMessageDialog(null, "Computer 1 Wins!!!",
                                "Slap Jack", JOptionPane.INFORMATION_MESSAGE, icon);
                        dispose();
                        x = 10;
                        PlayerHand1.add(null);
                    }
                    if (ComputerHand1.size() == 0) {
                        ImageIcon icon = new ImageIcon("src/cards/aces.jpg");
                        JOptionPane.showMessageDialog(null, "Player 1 Wins!!!",
                                "Slap Jack", JOptionPane.INFORMATION_MESSAGE, icon);
                        dispose();
                        x = 10;
                        ComputerHand1.add(null);
                    }

                } else if (Humanplayers == 2 && Computerplayers == 0) {

                    if (PlayerHand1.size() == 0) {

                        ImageIcon icon = new ImageIcon("src/cards/aces.jpg");
                        JOptionPane.showMessageDialog(null, "Player 2 Wins!!!",
                                "Slap Jack", JOptionPane.INFORMATION_MESSAGE, icon);
                        dispose();
                        x = 10;
                        PlayerHand1.add(null);
                    }

                    if (PlayerHand2.size() == 0) {

                        ImageIcon icon = new ImageIcon("src/cards/aces.jpg");
                        JOptionPane.showMessageDialog(null, "Player 2 Wins!!!",
                                "Slap Jack", JOptionPane.INFORMATION_MESSAGE, icon);
                        dispose();
                        x = 10;
                        PlayerHand2.add(null);
                    }
                }else if (Humanplayers == 1 && Computerplayers == 2) {

                    if (PlayerHand1.size() == 0 && ComputerHand2.size() == 0) {
                        ImageIcon icon = new ImageIcon("src/cards/aces.jpg");
                        JOptionPane.showMessageDialog(null, "Computer 1 Wins!!!",
                                "Slap Jack", JOptionPane.INFORMATION_MESSAGE, icon);
                        dispose();
                        x = 10;
                        PlayerHand1.add(null);
                        ComputerHand2.add(null);
                    }
                    if (PlayerHand1.size() == 0 && ComputerHand1.size() == 0) {
                        ImageIcon icon = new ImageIcon("src/cards/aces.jpg");
                        JOptionPane.showMessageDialog(null, "Computer 2 Wins!!!",
                                "Slap Jack", JOptionPane.INFORMATION_MESSAGE, icon);
                        dispose();
                        x = 10;
                        PlayerHand1.add(null);
                        ComputerHand1.add(null);
                    }
                    if (ComputerHand2.size() == 0 && ComputerHand1.size() == 0) {
                        ImageIcon icon = new ImageIcon("src/cards/aces.jpg");
                        JOptionPane.showMessageDialog(null, "Player 1 Wins!!!",
                                "Slap Jack", JOptionPane.INFORMATION_MESSAGE, icon);
                        dispose();
                        x = 10;
                        ComputerHand2.add(null);
                        ComputerHand1.add(null);
                    }
                    
                }

                jLabel2Player1.setText("<html>Player 1 <br> \n"
                        + "Use letter A to Slap<br>\n"
                        + "# of cards "
                        + deck.getTotalCards(PlayerHand1)
                        + "</html>\n");

                jLabel2Player2.setText("<html>Player 2 <br> \n"
                        + "Use letter L to Slap<br>\n"
                        + "# of cards "
                        + deck.getTotalCards(PlayerHand2)
                        + "</html>\n");

                jLabel3Player3.setText("<html>Computer <br> \n"
                        + "Player 1<br>\n"
                        + "# of cards "
                        + deck.getTotalCards(ComputerHand1)
                        + "</html>\n");

                jLabel4Player4.setText("<html>Computer <br> \n"
                        + "Player 2<br>\n"
                        + "# of cards "
                        + deck.getTotalCards(ComputerHand2)
                        + "</html>\n");

                x++;
                switch (x) {
                    case 1: //
                        if (PlayerHand1.size() != 0) {
                            jLabelPlayer1.setIcon(PlayerHand1.get(0).getCardImage());
                            CenterHand.add(PlayerHand1.remove(0));
                        } else {
                            jLabelPlayer1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cards/purple_back.jpg")));
                        }
                        break;
                    case 2:
                        if (PlayerHand2.size() != 0) {
                            if (Humanplayers == 2) {
                                jLabelPlayer2.setIcon(PlayerHand2.get(0).getCardImage());
                                CenterHand.add(PlayerHand2.remove(0));
                            }
                        } else {
                            jLabelPlayer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cards/purple_back.jpg")));
                        }

                        break;
                    case 3: //green

                        if (ComputerHand1.size() != 0) {

                            if (Computerplayers == 1 || Computerplayers == 2) {
                                jLabelPlayer3.setIcon(ComputerHand1.get(0).getCardImage());
                                CenterHand.add(ComputerHand1.remove(0));

                            }
                        } else {
                            jLabelPlayer3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cards/purple_back.jpg")));
                        }
                        break;
                    case 4:
                        if (ComputerHand2.size() != 0) {
                            if (Computerplayers == 2) {
                                jLabelPlayer4.setIcon(ComputerHand2.get(0).getCardImage());
                                CenterHand.add(ComputerHand2.remove(0));

                            }
                        } else {
                            jLabelPlayer4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cards/purple_back.jpg")));
                        }

                        x = 0;
                        break;
                }

                jLabel2Player1.setText("<html>Player 1 <br> \n"
                        + "Use letter A to Slap<br>\n"
                        + "# of cards "
                        + deck.getTotalCards(PlayerHand1)
                        + "</html>\n");

                jLabel2Player2.setText("<html>Player 2 <br> \n"
                        + "Use letter L to Slap<br>\n"
                        + "# of cards "
                        + deck.getTotalCards(PlayerHand2)
                        + "</html>\n");

                jLabel3Player3.setText("<html>Computer <br> \n"
                        + "Player 1<br>\n"
                        + "# of cards "
                        + deck.getTotalCards(ComputerHand1)
                        + "</html>\n");

                jLabel4Player4.setText("<html>Computer <br> \n"
                        + "Player 2<br>\n"
                        + "# of cards "
                        + deck.getTotalCards(ComputerHand2)
                        + "</html>\n");

            }
        };
        new javax.swing.Timer(delay, taskPerformer).start();

        if (Computerplayers == 1) {

            ActionListener taskPerformer2;
            taskPerformer2 = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    //   System.out.println(jLabelPlayer1.getIcon().toString());
                    if (jLabelPlayer1.getIcon().toString().equalsIgnoreCase(JACKofSPADES.toString())) {
                        for (int i = 0; i < CenterHand.size(); i++) {
                            ComputerHand1.add(CenterHand.remove(i));
                        };
                    } else if (jLabelPlayer1.getIcon().toString().equalsIgnoreCase(JACKofCLUBS.toString())) {
                        //  System.out.println(jLabelPlayer1.getIcon().toString());
                        for (int i = 0; i < CenterHand.size(); i++) {
                            ComputerHand1.add(CenterHand.remove(i));
                        }
                    } else if (jLabelPlayer1.getIcon().toString().equalsIgnoreCase(JACKofHEARTS.toString())) {
                        //  System.out.println(jLabelPlayer1.getIcon().toString());
                        for (int i = 0; i < CenterHand.size(); i++) {
                            ComputerHand1.add(CenterHand.remove(i));
                        }
                    } else if (jLabelPlayer1.getIcon().toString().equalsIgnoreCase(JACKofDIAMONDS.toString())) {
                        //  System.out.println(jLabelPlayer1.getIcon().toString());
                        for (int i = 0; i < CenterHand.size(); i++) {
                            ComputerHand1.add(CenterHand.remove(i));
                        }
                    } else if (jLabelPlayer3.getIcon().toString().equalsIgnoreCase(JACKofSPADES.toString())) {
                        //  System.out.println(jLabelPlayer1.getIcon().toString());
                        for (int i = 0; i < CenterHand.size(); i++) {
                            ComputerHand1.add(CenterHand.remove(i));
                        }
                    } else if (jLabelPlayer3.getIcon().toString().equalsIgnoreCase(JACKofCLUBS.toString())) {
                        //  System.out.println(jLabelPlayer1.getIcon().toString());
                        for (int i = 0; i < CenterHand.size(); i++) {
                            ComputerHand1.add(CenterHand.remove(i));
                        }
                    } else if (jLabelPlayer3.getIcon().toString().equalsIgnoreCase(JACKofHEARTS.toString())) {
                        //  System.out.println(jLabelPlayer1.getIcon().toString());
                        for (int i = 0; i < CenterHand.size(); i++) {
                            ComputerHand1.add(CenterHand.remove(i));
                        }
                    } else if (jLabelPlayer3.getIcon().toString().equalsIgnoreCase(JACKofDIAMONDS.toString())) {
                        //  System.out.println(jLabelPlayer1.getIcon().toString());
                        for (int i = 0; i < CenterHand.size(); i++) {
                            ComputerHand1.add(CenterHand.remove(i));
                        }
                    }
                }
            };
            new javax.swing.Timer(2000, taskPerformer2).start();
        }

        if (Computerplayers == 2) {
            ActionListener taskPerformer3;
            taskPerformer3 = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    //   System.out.println(jLabelPlayer1.getIcon().toString());
                    if (jLabelPlayer2.getIcon().toString().equalsIgnoreCase(JACKofSPADES.toString())) {
                        for (int i = 0; i < CenterHand.size(); i++) {
                            ComputerHand2.add(CenterHand.remove(i));
                        };
                    } else if (jLabelPlayer2.getIcon().toString().equalsIgnoreCase(JACKofCLUBS.toString())) {
                        //  System.out.println(jLabelPlayer1.getIcon().toString());
                        for (int i = 0; i < CenterHand.size(); i++) {
                            ComputerHand2.add(CenterHand.remove(i));
                        }
                    } else if (jLabelPlayer2.getIcon().toString().equalsIgnoreCase(JACKofHEARTS.toString())) {
                        //  System.out.println(jLabelPlayer1.getIcon().toString());
                        for (int i = 0; i < CenterHand.size(); i++) {
                            ComputerHand2.add(CenterHand.remove(i));
                        }
                    } else if (jLabelPlayer2.getIcon().toString().equalsIgnoreCase(JACKofDIAMONDS.toString())) {
                        //  System.out.println(jLabelPlayer1.getIcon().toString());
                        for (int i = 0; i < CenterHand.size(); i++) {
                            ComputerHand2.add(CenterHand.remove(i));
                        }
                    } else if (jLabelPlayer4.getIcon().toString().equalsIgnoreCase(JACKofSPADES.toString())) {
                        //  System.out.println(jLabelPlayer1.getIcon().toString());
                        for (int i = 0; i < CenterHand.size(); i++) {
                            ComputerHand2.add(CenterHand.remove(i));
                        }
                    } else if (jLabelPlayer4.getIcon().toString().equalsIgnoreCase(JACKofCLUBS.toString())) {
                        //  System.out.println(jLabelPlayer1.getIcon().toString());
                        for (int i = 0; i < CenterHand.size(); i++) {
                            ComputerHand2.add(CenterHand.remove(i));
                        }
                    } else if (jLabelPlayer4.getIcon().toString().equalsIgnoreCase(JACKofHEARTS.toString())) {
                        //  System.out.println(jLabelPlayer1.getIcon().toString());
                        for (int i = 0; i < CenterHand.size(); i++) {
                            ComputerHand2.add(CenterHand.remove(i));
                        }
                    } else if (jLabelPlayer4.getIcon().toString().equalsIgnoreCase(JACKofDIAMONDS.toString())) {
                        //  System.out.println(jLabelPlayer1.getIcon().toString());
                        for (int i = 0; i < CenterHand.size(); i++) {
                            ComputerHand2.add(CenterHand.remove(i));
                        }
                    }
                }
            };
            new javax.swing.Timer(2200, taskPerformer3).start();
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:

        Humanplayers++;

        if (Humanplayers == 1) {
            addComputerButton.setEnabled(true);

            jLabelPlayer1.setVisible(true);
            jLabel2Player1.setVisible(true);
            CenterDeck.setVisible(true);

        } else {
            addButton.setEnabled(false);
            startButton.setEnabled(true);

            jLabelPlayer2.setVisible(true);
            jLabel2Player2.setVisible(true);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void addComputerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addComputerButtonActionPerformed
        // TODO add your handling code here:
        Computerplayers++;
        if (Humanplayers != 4 && Computerplayers == 1) {
            startButton.setEnabled(true);

            //players
            jLabelPlayer3.setVisible(true);
            jLabel3Player3.setVisible(true);

        } else if ((Humanplayers == 4 || Computerplayers == 2)) {
            addComputerButton.setEnabled(false);

            jLabelPlayer4.setVisible(true);
            jLabel4Player4.setVisible(true);

        } else {

        }
    }//GEN-LAST:event_addComputerButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    // */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sjFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sjFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sjFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sjFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sjFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CenterDeck;
    private javax.swing.JButton addButton;
    private javax.swing.JButton addComputerButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel2Player1;
    private javax.swing.JLabel jLabel2Player2;
    private javax.swing.JLabel jLabel3Player3;
    private javax.swing.JLabel jLabel4Player4;
    private javax.swing.JLabel jLabelPlayer1;
    private javax.swing.JLabel jLabelPlayer2;
    private javax.swing.JLabel jLabelPlayer3;
    private javax.swing.JLabel jLabelPlayer4;
    private java.awt.Panel panel1;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent ke) {
        //System.out.println("");
        //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        // System.out.println("");
        // System.out.println(jLabelPlayer1.getIcon().toString());
        int key = ke.getKeyCode();
        //            System.out.println(temp);  
        String temp1 = "/cards/JACKofSPADES.jpg";

        String temp2 = "/cards/JACKofCLUBS.jpg";

        String temp3 = "/cards/JACKofHEARTS.jpg";

        String temp4 = "/cards/JACKofDIAMONDS.jpg";

        //    System.out.println(temp2);  
        ImageIcon JACKofSPADES;
        ImageIcon JACKofCLUBS;
        ImageIcon JACKofHEARTS;
        ImageIcon JACKofDIAMONDS;

        JACKofSPADES = new ImageIcon(getClass().getResource(temp1));
        JACKofCLUBS = new ImageIcon(getClass().getResource(temp2));
        JACKofHEARTS = new ImageIcon(getClass().getResource(temp3));
        JACKofDIAMONDS = new ImageIcon(getClass().getResource(temp4));

        if (key == KeyEvent.VK_A) {
            //   System.out.println(jLabelPlayer1.getIcon().toString());
            if (jLabelPlayer1.getIcon().toString().equalsIgnoreCase(JACKofSPADES.toString())) {

                PlayerHand1.addAll(CenterHand);
                CenterHand.removeAll(CenterHand);
            } else if (jLabelPlayer1.getIcon().toString().equalsIgnoreCase(JACKofCLUBS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                PlayerHand1.addAll(CenterHand);
                CenterHand.removeAll(CenterHand);
            } else if (jLabelPlayer1.getIcon().toString().equalsIgnoreCase(JACKofHEARTS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                PlayerHand1.addAll(CenterHand);
                CenterHand.removeAll(CenterHand);
            } else if (jLabelPlayer1.getIcon().toString().equalsIgnoreCase(JACKofDIAMONDS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                PlayerHand1.addAll(CenterHand);
                CenterHand.removeAll(CenterHand);
            } else if (jLabelPlayer2.getIcon().toString().equalsIgnoreCase(JACKofSPADES.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                PlayerHand1.addAll(CenterHand);
                CenterHand.removeAll(CenterHand);
            } else if (jLabelPlayer2.getIcon().toString().equalsIgnoreCase(JACKofCLUBS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand1.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer2.getIcon().toString().equalsIgnoreCase(JACKofHEARTS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand1.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer2.getIcon().toString().equalsIgnoreCase(JACKofDIAMONDS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand1.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer3.getIcon().toString().equalsIgnoreCase(JACKofSPADES.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand1.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer3.getIcon().toString().equalsIgnoreCase(JACKofCLUBS.toString())) {
                // System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand1.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer3.getIcon().toString().equalsIgnoreCase(JACKofHEARTS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand1.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer3.getIcon().toString().equalsIgnoreCase(JACKofDIAMONDS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand1.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer4.getIcon().toString().equalsIgnoreCase(JACKofSPADES.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand1.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer4.getIcon().toString().equalsIgnoreCase(JACKofCLUBS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand1.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer4.getIcon().toString().equalsIgnoreCase(JACKofHEARTS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand1.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer4.getIcon().toString().equalsIgnoreCase(JACKofDIAMONDS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand1.add(CenterHand.remove(i));
                }
            } else {
                if (PlayerHand1.size() != 0) {
                    CenterHand.add(PlayerHand1.remove(0));
                }
            }
        }
        if (key == KeyEvent.VK_L) {
            //   System.out.println(jLabelPlayer1.getIcon().toString());
            if (jLabelPlayer1.getIcon().toString().equalsIgnoreCase(JACKofSPADES.toString())) {

                PlayerHand2.addAll(CenterHand);
                CenterHand.removeAll(CenterHand);
            } else if (jLabelPlayer1.getIcon().toString().equalsIgnoreCase(JACKofCLUBS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                PlayerHand2.addAll(CenterHand);
                CenterHand.removeAll(CenterHand);
            } else if (jLabelPlayer1.getIcon().toString().equalsIgnoreCase(JACKofHEARTS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                PlayerHand2.addAll(CenterHand);
                CenterHand.removeAll(CenterHand);
            } else if (jLabelPlayer1.getIcon().toString().equalsIgnoreCase(JACKofDIAMONDS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                PlayerHand2.addAll(CenterHand);
                CenterHand.removeAll(CenterHand);
            } else if (jLabelPlayer2.getIcon().toString().equalsIgnoreCase(JACKofSPADES.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                PlayerHand2.addAll(CenterHand);
                CenterHand.removeAll(CenterHand);
            } else if (jLabelPlayer2.getIcon().toString().equalsIgnoreCase(JACKofCLUBS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand2.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer2.getIcon().toString().equalsIgnoreCase(JACKofHEARTS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand2.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer2.getIcon().toString().equalsIgnoreCase(JACKofDIAMONDS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand2.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer3.getIcon().toString().equalsIgnoreCase(JACKofSPADES.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand2.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer3.getIcon().toString().equalsIgnoreCase(JACKofCLUBS.toString())) {
                // System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand2.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer3.getIcon().toString().equalsIgnoreCase(JACKofHEARTS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand2.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer3.getIcon().toString().equalsIgnoreCase(JACKofDIAMONDS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand2.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer4.getIcon().toString().equalsIgnoreCase(JACKofSPADES.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand2.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer4.getIcon().toString().equalsIgnoreCase(JACKofCLUBS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand2.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer4.getIcon().toString().equalsIgnoreCase(JACKofHEARTS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand2.add(CenterHand.remove(i));
                }
            } else if (jLabelPlayer4.getIcon().toString().equalsIgnoreCase(JACKofDIAMONDS.toString())) {
                //  System.out.println(jLabelPlayer1.getIcon().toString());
                for (int i = 0; i < CenterHand.size(); i++) {
                    PlayerHand2.add(CenterHand.remove(i));
                }
            } else {
                if (PlayerHand2.size() != 0) {
                    CenterHand.add(PlayerHand2.remove(0));
                }
            }
        }

        //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyReleased(KeyEvent ke) {
        // System.out.println("");
        //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
