/**
 * Course: CS341 Data Structures
 * Date: April 2018
 * Assignment: CS341_FinalProject
 * Authors: Trevor Conway, Tristin Harvell, Travis Kruse, Johnny Tran
 */
package MainPackage;

import FramePackage.adminFrame;
import MainPackage.Player;
import FramePackage.bjFrame;
import FramePackage.difficultyFrame;
import static FramePackage.difficultyFrame.difficulty;
import FramePackage.mmFrame;
import FramePackage.sjFrame;
import FramePackage.ssFrame;
import java.awt.HeadlessException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();

        //makes the reset button invisible
        adminButton.setOpaque(false);
        adminButton.setContentAreaFilled(false);
        adminButton.setBorderPainted(false);
    }

    //call the load method to get players from player.ser file,
    //fills the array list with existing players
    List<Player> playerList = loadPlayers();

    //used to reset players.ser file
    //List<Player> playerList = new ArrayList<Player>();
    
    //the gameID for each game, needed for difficulty chooser if used
    public static int gameID;

    public static int getGameID() {
        return gameID;
    }

    public static void setGameID(int gameChosen) {
        gameID = gameChosen;
    }

    //default sign in as first player in list
    public static Player player;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        memoryButton = new javax.swing.JButton();
        bjButton = new javax.swing.JButton();
        slapjackButton = new javax.swing.JButton();
        ssButton = new javax.swing.JButton();
        optionLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        createPlayerButton = new javax.swing.JButton();
        selectUserButton = new javax.swing.JButton();
        playerStatsButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        playerLabel = new javax.swing.JLabel();
        adminButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Main Menu");

        memoryButton.setText("Memory Match");
        memoryButton.setEnabled(false);
        memoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memoryButtonActionPerformed(evt);
            }
        });

        bjButton.setText("Blackjack");
        bjButton.setEnabled(false);
        bjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bjButtonActionPerformed(evt);
            }
        });

        slapjackButton.setText("Slapjack");
        slapjackButton.setEnabled(false);
        slapjackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slapjackButtonActionPerformed(evt);
            }
        });

        ssButton.setText("Simon Says");
        ssButton.setEnabled(false);
        ssButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ssButtonActionPerformed(evt);
            }
        });

        optionLabel.setText("Game Options:");

        jLabel1.setText("Player Options:");

        createPlayerButton.setText("Create Player");
        createPlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPlayerButtonActionPerformed(evt);
            }
        });

        selectUserButton.setText("Select User");
        selectUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectUserButtonActionPerformed(evt);
            }
        });

        playerStatsButton.setText("Player Stats");
        playerStatsButton.setEnabled(false);
        playerStatsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerStatsButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        adminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(playerStatsButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(createPlayerButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectUserButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(63, 63, 63)
                                .addComponent(playerLabel)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(memoryButton)
                            .addComponent(slapjackButton)
                            .addComponent(optionLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(adminButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ssButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bjButton, createPlayerButton, memoryButton, playerStatsButton, selectUserButton, slapjackButton, ssButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optionLabel)
                    .addComponent(adminButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(memoryButton)
                    .addComponent(bjButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(slapjackButton)
                    .addComponent(ssButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(playerLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createPlayerButton)
                    .addComponent(selectUserButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerStatsButton)
                    .addComponent(saveButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bjButton, memoryButton, slapjackButton, ssButton});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bjButtonActionPerformed
        // TODO add your handling code here:
        /* //if difficulty is used
                difficultyFrame dF = new difficultyFrame();
            dF.setVisible(true);
         */
        //no difficulty chooser
        bjFrame bj = new bjFrame();
        bj.setVisible(true);
        Menu.setGameID(1);
    }//GEN-LAST:event_bjButtonActionPerformed

    private void memoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoryButtonActionPerformed
        // TODO add your handling code here:
        //difficulty chooser
        difficultyFrame dF = new difficultyFrame();
        dF.setVisible(true);
        Menu.setGameID(2);
    }//GEN-LAST:event_memoryButtonActionPerformed

    private void slapjackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slapjackButtonActionPerformed
        // TODO add your handling code here:
        /*//if difficulty is used
        difficultyFrame dF = new difficultyFrame();
        dF.setVisible(true);
         */
        //no difficulty chooser
        sjFrame sj = new sjFrame();
        sj.setVisible(true);
        Menu.setGameID(3);
    }//GEN-LAST:event_slapjackButtonActionPerformed

    private void ssButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ssButtonActionPerformed
        // TODO add your handling code here:
        /*//difficulty chooser
        difficultyFrame dF = new difficultyFrame();
        dF.setVisible(true);
         */
        //no difficulty chooser
        ssFrame ss = new ssFrame();
        ss.setVisible(true);
        Menu.setGameID(4);
    }//GEN-LAST:event_ssButtonActionPerformed

    private void createPlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPlayerButtonActionPerformed
        // TODO add your handling code here:
        Player player = new Player();

        System.out.println("Create Player: " + playerList);

        String username = JOptionPane.showInputDialog(null, "Enter new player name: ");
        String fundsString = JOptionPane.showInputDialog(null, "Enter funds to deposit: ");

        player.setUsername(username);
        player.setFunds(Integer.parseInt(fundsString));

        playerList.add(playerList.size(), player);

        //enable games and stats
        memoryButton.setEnabled(true);
        ssButton.setEnabled(true);
        slapjackButton.setEnabled(true);
        bjButton.setEnabled(true);
        saveButton.setEnabled(true);
        playerStatsButton.setEnabled(true);
    }//GEN-LAST:event_createPlayerButtonActionPerformed

    private void selectUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectUserButtonActionPerformed

        System.out.println("Selected User: " + playerList);

        player = new Player();
        String username = JOptionPane.showInputDialog(null, "Enter existing player name: ");

        //search list for username
        for (int i = 0; i < playerList.size(); i++) {
            if (playerList.get(i).getUsername().equals(username)) {
                player = playerList.get(i);
                JOptionPane.showMessageDialog(rootPane, "You've been signed in.");
                playerLabel.setText(player.getUsername());
                break;
            }
            if (i == playerList.size() && !playerList.get(i).getUsername().equals(username)) {
                JOptionPane.showMessageDialog(rootPane, "Username could not be found");
            }
        }

        //enable games and stats
        memoryButton.setEnabled(true);
        ssButton.setEnabled(true);
        slapjackButton.setEnabled(true);
        bjButton.setEnabled(true);
        saveButton.setEnabled(true);
        playerStatsButton.setEnabled(true);

    }//GEN-LAST:event_selectUserButtonActionPerformed

    private void playerStatsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerStatsButtonActionPerformed
        JOptionPane.showMessageDialog(rootPane, player.toString() + "\n" + player.getAllStats());
    }//GEN-LAST:event_playerStatsButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            // create a new file with an ObjectOutputStream
            FileOutputStream out = new FileOutputStream("players.ser");
            try (ObjectOutputStream oout = new ObjectOutputStream(out)) {
                oout.writeObject(playerList);
            }

            JOptionPane.showMessageDialog(rootPane, "Player data has been saved.");

        } catch (HeadlessException | IOException ex) {
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void adminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminButtonActionPerformed
        // TODO add your handling code here:
        adminFrame admin = new adminFrame(playerList);
        admin.setVisible(true);
        
        //updates the player list
        playerList = adminFrame.playerListCopy;

    }//GEN-LAST:event_adminButtonActionPerformed

    public List<Player> loadPlayers() {
        List<Player> playerList = new ArrayList<Player>();
        try {
            FileInputStream fis = new FileInputStream("players.ser");
            ObjectInputStream ois = new ObjectInputStream(fis);
            playerList = (List<Player>) ois.readObject();
            ois.close();

            // read and print an object and cast it as string
            System.out.println("Previous player info added: " + playerList);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return playerList;
    }//end loadPlayers

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        Deck deck = new Deck();

        deck.shuffleDeck();

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adminButton;
    private javax.swing.JButton bjButton;
    private javax.swing.JButton createPlayerButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton memoryButton;
    private javax.swing.JLabel optionLabel;
    private javax.swing.JLabel playerLabel;
    private javax.swing.JButton playerStatsButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton selectUserButton;
    private javax.swing.JButton slapjackButton;
    private javax.swing.JButton ssButton;
    // End of variables declaration//GEN-END:variables
}
